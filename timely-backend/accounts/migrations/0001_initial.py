# Generated by Django 5.2.5 on 2025-08-26 10:30

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=80)),
                ('last_name', models.CharField(blank=True, max_length=80)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(db_index=True, default=False)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('ORGANIZER', 'Event Organizer'), ('ATHLETE', 'Athlete'), ('COACH', 'Coach'), ('MANAGER', 'Team Manager'), ('SPECTATOR', 'Spectator'), ('VOLUNTEER', 'Volunteer'), ('REFEREE', 'Referee'), ('MEDICAL', 'Medical Staff'), ('SUPPORT', 'Support Staff')], default='SPECTATOR', max_length=12)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(default='Australia', max_length=100)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('website', models.URLField(blank=True)),
                ('social_media', models.JSONField(blank=True, default=dict)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('stripe_customer_id', models.CharField(blank=True, db_index=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'accounts_user',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('PASSWORD_CHANGE', 'Password Change'), ('ROLE_ASSIGNMENT', 'Role Assignment'), ('ROLE_REMOVAL', 'Role Removal'), ('PERMISSION_CHANGE', 'Permission Change'), ('EMAIL_VERIFICATION', 'Email Verification'), ('PAYMENT_PROCESSING', 'Payment Processing')], max_length=50)),
                ('resource_type', models.CharField(help_text='Type of resource being acted upon', max_length=100)),
                ('resource_id', models.CharField(blank=True, help_text='ID of the resource', max_length=100)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'accounts_audit_log',
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts_email_verification_token',
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts_password_reset_token',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('ADMIN', 'Administrator'), ('ORGANIZER', 'Event Organizer'), ('ATHLETE', 'Athlete'), ('COACH', 'Coach'), ('MANAGER', 'Team Manager'), ('SPECTATOR', 'Spectator'), ('VOLUNTEER', 'Volunteer'), ('REFEREE', 'Referee'), ('MEDICAL', 'Medical Staff'), ('SUPPORT', 'Support Staff')], max_length=20)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary role for this user')),
                ('can_manage_events', models.BooleanField(default=False)),
                ('can_manage_teams', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_manage_fixtures', models.BooleanField(default=False)),
                ('can_manage_results', models.BooleanField(default=False)),
                ('can_manage_payments', models.BooleanField(default=False)),
                ('can_manage_content', models.BooleanField(default=False)),
                ('can_view_reports', models.BooleanField(default=False)),
                ('context_type', models.CharField(blank=True, help_text='Type of context (event, team, organization)', max_length=50)),
                ('context_id', models.PositiveIntegerField(blank=True, help_text='ID of the context object', null=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'accounts_user_role',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='accounts_us_is_acti_a5841d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email_verified'], name='accounts_us_email_v_054104_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='accounts_us_created_4734df_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['stripe_customer_id'], name='accounts_us_stripe__0997f8_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'created_at'], name='accounts_au_user_id_470480_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action', 'created_at'], name='accounts_au_action_645973_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['resource_type', 'resource_id'], name='accounts_au_resourc_f4be54_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='accounts_au_created_4799f4_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['token'], name='accounts_em_token_5a6f4a_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['user', 'is_used'], name='accounts_em_user_id_d2edbf_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['expires_at'], name='accounts_em_expires_af5955_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['token'], name='accounts_pa_token_3e0820_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['user', 'is_used'], name='accounts_pa_user_id_ed83c9_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['expires_at'], name='accounts_pa_expires_682fbf_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user', 'is_active'], name='accounts_us_user_id_3e57b0_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['role_type', 'is_active'], name='accounts_us_role_ty_9a216b_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['context_type', 'context_id'], name='accounts_us_context_09aa51_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['assigned_at'], name='accounts_us_assigne_5f6e61_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role_type', 'context_type', 'context_id')},
        ),
    ]
