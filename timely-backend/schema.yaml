openapi: 3.0.3
info:
  title: Timely API
  version: 1.0.0
  description: Online Sports Events Management System API
paths:
  /api/auth/:
    get:
      operationId: api_auth_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_auth_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/auth/admin/users/:
    get:
      operationId: api_auth_admin_users_list
      description: Admin user management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserListList'
          description: ''
    post:
      operationId: api_auth_admin_users_create
      description: Admin user management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/auth/admin/users/{id}/:
    get:
      operationId: api_auth_admin_users_retrieve
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    put:
      operationId: api_auth_admin_users_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    patch:
      operationId: api_auth_admin_users_partial_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    delete:
      operationId: api_auth_admin_users_destroy
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/admin/users/{id}/assign-role/:
    post:
      operationId: api_auth_admin_users_assign_role_create
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/auth/admin/users/{id}/assign_role/:
    post:
      operationId: api_auth_admin_users_assign_role_create_2
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/auth/admin/users/{id}/delete-user/:
    delete:
      operationId: api_auth_admin_users_delete_user_destroy
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/admin/users/{id}/delete_user/:
    delete:
      operationId: api_auth_admin_users_delete_user_destroy_2
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/audit-logs/:
    get:
      operationId: api_auth_audit_logs_list
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: query
        name: action
        schema:
          type: string
          enum:
          - CREATE
          - DELETE
          - EMAIL_VERIFICATION
          - KYC_APPROVED
          - KYC_REJECTED
          - LOGIN
          - LOGOUT
          - PASSWORD_CHANGE
          - PAYMENT_PROCESSING
          - PERMISSION_CHANGE
          - ROLE_ASSIGNMENT
          - ROLE_REMOVAL
          - ROLE_REQUEST_APPROVED
          - ROLE_REQUEST_REJECTED
          - UPDATE
        description: |-
          * `CREATE` - Create
          * `UPDATE` - Update
          * `DELETE` - Delete
          * `LOGIN` - Login
          * `LOGOUT` - Logout
          * `PASSWORD_CHANGE` - Password Change
          * `ROLE_ASSIGNMENT` - Role Assignment
          * `ROLE_REMOVAL` - Role Removal
          * `PERMISSION_CHANGE` - Permission Change
          * `EMAIL_VERIFICATION` - Email Verification
          * `PAYMENT_PROCESSING` - Payment Processing
          * `ROLE_REQUEST_APPROVED` - Role Request Approved
          * `ROLE_REQUEST_REJECTED` - Role Request Rejected
          * `KYC_APPROVED` - KYC Approved
          * `KYC_REJECTED` - KYC Rejected
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: resource_type
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogList'
          description: ''
  /api/auth/audit-logs/{id}/:
    get:
      operationId: api_auth_audit_logs_retrieve
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Audit Log.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLog'
          description: ''
  /api/auth/auth/login/:
    post:
      operationId: api_auth_auth_login_create
      description: User login endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/logout/:
    post:
      operationId: api_auth_auth_logout_create
      description: User logout endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/password/forgot/:
    post:
      operationId: api_auth_auth_password_forgot_create
      description: Request password reset endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/password/reset/confirm/:
    post:
      operationId: api_auth_auth_password_reset_confirm_create
      description: Confirm password reset endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/refresh/:
    post:
      operationId: api_auth_auth_refresh_create
      description: Refresh JWT token endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/register/:
    post:
      operationId: api_auth_auth_register_create
      description: User registration endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/auth/verify-email/:
    post:
      operationId: api_auth_auth_verify_email_create
      description: Email verification endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/role-requests/:
    get:
      operationId: api_auth_role_requests_list
      description: Role request management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleRequestList'
          description: ''
    post:
      operationId: api_auth_role_requests_create
      description: Role request management
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestCreate'
          description: ''
  /api/auth/role-requests/{id}/:
    get:
      operationId: api_auth_role_requests_retrieve
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    put:
      operationId: api_auth_role_requests_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    patch:
      operationId: api_auth_role_requests_partial_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    delete:
      operationId: api_auth_role_requests_destroy
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/role-requests/{id}/approve/:
    patch:
      operationId: api_auth_role_requests_approve_partial_update
      description: Approve role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/auth/role-requests/{id}/reject/:
    patch:
      operationId: api_auth_role_requests_reject_partial_update
      description: Reject role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/auth/role-requests/mine/:
    get:
      operationId: api_auth_role_requests_mine_retrieve
      description: Get current user's role requests
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
  /api/auth/roles/:
    get:
      operationId: api_auth_roles_list
      description: User role management endpoints
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_primary
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role_type
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: api_auth_roles_create
      description: User role management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/auth/roles/{id}/:
    get:
      operationId: api_auth_roles_retrieve
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: api_auth_roles_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    patch:
      operationId: api_auth_roles_partial_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: api_auth_roles_destroy
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/users/:
    get:
      operationId: api_auth_users_list
      description: User management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserProfileList'
          description: ''
    post:
      operationId: api_auth_users_create
      description: User management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/users/{id}/:
    get:
      operationId: api_auth_users_retrieve
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_auth_users_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    patch:
      operationId: api_auth_users_partial_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    delete:
      operationId: api_auth_users_destroy
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/users/{id}/change-password/:
    post:
      operationId: api_auth_users_change_password_create
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/users/{id}/change_password/:
    post:
      operationId: api_auth_users_change_password_create_2
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/users/{id}/update-role/:
    patch:
      operationId: api_auth_users_update_role_partial_update
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/users/{id}/update_role/:
    patch:
      operationId: api_auth_users_update_role_partial_update_2
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/auth/users/me/:
    get:
      operationId: api_auth_users_me_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_auth_users_me_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/events/:
    get:
      operationId: api_events_list
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: sport
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELLED
          - COMPLETED
          - ONGOING
          - UPCOMING
        description: |-
          Event status

          * `UPCOMING` - Upcoming
          * `ONGOING` - Ongoing
          * `COMPLETED` - Completed
          * `CANCELLED` - Cancelled
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
    post:
      operationId: api_events_create
      description: Event ViewSet with RBAC and lifecycle management
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{event_id}/announce/messages/messages/:
    get:
      operationId: api_events_announce_messages_messages_list
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageList'
          description: ''
    post:
      operationId: api_events_announce_messages_messages_create
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/events/{event_id}/announce/messages/messages/{id}/:
    get:
      operationId: api_events_announce_messages_messages_retrieve
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    put:
      operationId: api_events_announce_messages_messages_update
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    patch:
      operationId: api_events_announce_messages_messages_partial_update
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    delete:
      operationId: api_events_announce_messages_messages_destroy
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/announce/messages/threads/:
    get:
      operationId: api_events_announce_messages_threads_list
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageThreadList'
          description: ''
    post:
      operationId: api_events_announce_messages_threads_create
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadCreate'
          description: ''
  /api/events/{event_id}/announce/messages/threads/{id}/:
    get:
      operationId: api_events_announce_messages_threads_retrieve
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    put:
      operationId: api_events_announce_messages_threads_update
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    patch:
      operationId: api_events_announce_messages_threads_partial_update
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    delete:
      operationId: api_events_announce_messages_threads_destroy
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/announce/messages/threads/{id}/add_participant/:
    post:
      operationId: api_events_announce_messages_threads_add_participant_create
      description: Add participant to thread
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/events/{event_id}/announce/messages/threads/{id}/messages/:
    get:
      operationId: api_events_announce_messages_threads_messages_retrieve
      description: Get messages for a thread
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/events/{event_id}/announce/messages/threads/{id}/participants/{user_id}/:
    delete:
      operationId: api_events_announce_messages_threads_participants_destroy
      description: Remove participant from thread
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/announce/messages/threads/{id}/send_message/:
    post:
      operationId: api_events_announce_messages_threads_send_message_create
      description: Send message to thread
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/events/{event_id}/announce/notify/:
    get:
      operationId: api_events_announce_notify_list
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
    post:
      operationId: api_events_announce_notify_create
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/events/{event_id}/announce/notify/{id}/:
    get:
      operationId: api_events_announce_notify_retrieve
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: api_events_announce_notify_update
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: api_events_announce_notify_partial_update
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    delete:
      operationId: api_events_announce_notify_destroy
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/announce/notify/{id}/mark_read/:
    post:
      operationId: api_events_announce_notify_mark_read_create
      description: Mark a specific notification as read
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/events/{event_id}/announce/notify/announce/:
    post:
      operationId: api_events_announce_notify_announce_create
      description: Create announcement and fan-out to participants
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/events/{event_id}/announce/notify/mark_all_read/:
    post:
      operationId: api_events_announce_notify_mark_all_read_create
      description: Mark all notifications as read
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/events/{event_id}/fixtures/:
    get:
      operationId: api_events_fixtures_retrieve
      description: Get fixtures for an event (for schedule/results pages)
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{event_id}/registrations/:
    get:
      operationId: api_events_registrations_list
      description: ViewSet for registration management
      parameters:
      - in: query
        name: event
        schema:
          type: integer
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - APPROVED
          - PENDING
          - REJECTED
        description: |-
          * `PENDING` - Pending
          * `APPROVED` - Approved
          * `REJECTED` - Rejected
      - in: query
        name: type
        schema:
          type: string
          enum:
          - ATHLETE
          - TEAM
        description: |-
          * `TEAM` - Team
          * `ATHLETE` - Athlete
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationListList'
          description: ''
    post:
      operationId: api_events_registrations_create
      description: Create a new registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCreate'
          description: ''
  /api/events/{event_id}/registrations/{id}/:
    get:
      operationId: api_events_registrations_retrieve
      description: ViewSet for registration management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    put:
      operationId: api_events_registrations_update
      description: ViewSet for registration management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    patch:
      operationId: api_events_registrations_partial_update
      description: ViewSet for registration management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    delete:
      operationId: api_events_registrations_destroy
      description: ViewSet for registration management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/registrations/{id}/approve/:
    patch:
      operationId: api_events_registrations_approve_partial_update
      description: Approve registration (organizer only)
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/pay/:
    post:
      operationId: api_events_registrations_pay_create
      description: Create payment order for registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/pay_confirm/:
    post:
      operationId: api_events_registrations_pay_confirm_create
      description: Confirm payment for registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/pay_intent/:
    post:
      operationId: api_events_registrations_pay_intent_create
      description: Create payment intent for registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/payment_status/:
    get:
      operationId: api_events_registrations_payment_status_retrieve
      description: Get payment status for registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/reject/:
    patch:
      operationId: api_events_registrations_reject_partial_update
      description: Reject registration (organizer only)
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/request_reupload/:
    patch:
      operationId: api_events_registrations_request_reupload_partial_update
      description: Request document reupload
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/status/:
    get:
      operationId: api_events_registrations_status_retrieve
      description: Get registration status
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/waitlist/:
    patch:
      operationId: api_events_registrations_waitlist_partial_update
      description: Waitlist a registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{id}/withdraw/:
    patch:
      operationId: api_events_registrations_withdraw_partial_update
      description: Withdraw a registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_id}/registrations/{registration_pk}/documents/:
    get:
      operationId: api_events_registrations_documents_list
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationDocumentList'
          description: ''
    post:
      operationId: api_events_registrations_documents_create
      description: Upload a document for registration
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocumentUpload'
          description: ''
  /api/events/{event_id}/registrations/{registration_pk}/documents/{id}/:
    get:
      operationId: api_events_registrations_documents_retrieve
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    put:
      operationId: api_events_registrations_documents_update
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    patch:
      operationId: api_events_registrations_documents_partial_update
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    delete:
      operationId: api_events_registrations_documents_destroy
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{event_id}/registrations/mine/:
    get:
      operationId: api_events_registrations_mine_retrieve
      description: Get current user's registrations
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/events/{event_pk}/divisions/:
    get:
      operationId: api_events_divisions_list
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDivisionList'
          description: ''
    post:
      operationId: api_events_divisions_create
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Division'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Division'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
  /api/events/{event_pk}/divisions/{id}/:
    get:
      operationId: api_events_divisions_retrieve
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    put:
      operationId: api_events_divisions_update
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Division'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Division'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    patch:
      operationId: api_events_divisions_partial_update
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    delete:
      operationId: api_events_divisions_destroy
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{id}/:
    get:
      operationId: api_events_retrieve
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    put:
      operationId: api_events_update
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    patch:
      operationId: api_events_partial_update
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    delete:
      operationId: api_events_destroy
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/events/{id}/cancel/:
    post:
      operationId: api_events_cancel_create
      description: Cancel an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/fixtures/:
    get:
      operationId: api_events_fixtures_retrieve_2
      description: Get fixtures for an event (for schedule/results pages)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/fixtures/generate/:
    post:
      operationId: api_events_fixtures_generate_create
      description: Generate fixtures for an event (Round Robin or Knockout)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/publish/:
    post:
      operationId: api_events_publish_create
      description: Publish a draft event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/registrations/:
    get:
      operationId: api_events_registrations_retrieve_2
      description: Get or create registrations for an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    post:
      operationId: api_events_registrations_create_2
      description: Get or create registrations for an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/events/{id}/unpublish/:
    post:
      operationId: api_events_unpublish_create
      description: Unpublish an event (return to draft)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/fixtures/events/{event_id}/fixtures/:
    get:
      operationId: api_fixtures_events_fixtures_list
      description: ViewSet for event-specific fixture operations.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFixtureListList'
          description: ''
    post:
      operationId: api_fixtures_events_fixtures_create
      description: Publish all draft fixtures for an event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FixtureList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FixtureList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FixtureList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FixtureList'
          description: ''
  /api/fixtures/fixtures/:
    get:
      operationId: api_fixtures_fixtures_list
      description: ViewSet for fixture CRUD operations.
      parameters:
      - in: query
        name: event
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - FINAL
          - LIVE
          - SCHEDULED
        description: |-
          * `SCHEDULED` - Scheduled
          * `LIVE` - Live
          * `FINAL` - Final
      - in: query
        name: venue
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFixtureListList'
          description: ''
    post:
      operationId: api_fixtures_fixtures_create
      description: ViewSet for fixture CRUD operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/{id}/:
    get:
      operationId: api_fixtures_fixtures_retrieve
      description: ViewSet for fixture CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
    put:
      operationId: api_fixtures_fixtures_update
      description: ViewSet for fixture CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
    patch:
      operationId: api_fixtures_fixtures_partial_update
      description: ViewSet for fixture CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFixture'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
    delete:
      operationId: api_fixtures_fixtures_destroy
      description: ViewSet for fixture CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/fixtures/fixtures/{id}/conflicts/:
    get:
      operationId: api_fixtures_fixtures_conflicts_retrieve
      description: Check conflicts for a fixture
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/{id}/publish/:
    post:
      operationId: api_fixtures_fixtures_publish_create
      description: Publish a fixture
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/{id}/reschedule/:
    post:
      operationId: api_fixtures_fixtures_reschedule_create
      description: Reschedule a fixture
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/{id}/swap-entries/:
    post:
      operationId: api_fixtures_fixtures_swap_entries_create
      description: Swap home and away entries
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this fixture.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/accept/:
    post:
      operationId: api_fixtures_fixtures_accept_create
      description: Accept generated fixtures and save as draft
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/fixtures/generate/:
    post:
      operationId: api_fixtures_fixtures_generate_create
      description: Generate fixture proposals
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fixture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fixture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Fixture'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fixture'
          description: ''
  /api/fixtures/public/events/{event_id}/fixtures/:
    get:
      operationId: api_fixtures_public_events_fixtures_list
      description: ViewSet for event-specific fixture operations.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFixtureListList'
          description: ''
  /api/me/:
    get:
      operationId: api_me_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_me_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/me/admin/users/:
    get:
      operationId: api_me_admin_users_list
      description: Admin user management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserListList'
          description: ''
    post:
      operationId: api_me_admin_users_create
      description: Admin user management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/me/admin/users/{id}/:
    get:
      operationId: api_me_admin_users_retrieve
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    put:
      operationId: api_me_admin_users_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    patch:
      operationId: api_me_admin_users_partial_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    delete:
      operationId: api_me_admin_users_destroy
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/admin/users/{id}/assign-role/:
    post:
      operationId: api_me_admin_users_assign_role_create
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/me/admin/users/{id}/assign_role/:
    post:
      operationId: api_me_admin_users_assign_role_create_2
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/me/admin/users/{id}/delete-user/:
    delete:
      operationId: api_me_admin_users_delete_user_destroy
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/admin/users/{id}/delete_user/:
    delete:
      operationId: api_me_admin_users_delete_user_destroy_2
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/audit-logs/:
    get:
      operationId: api_me_audit_logs_list
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: query
        name: action
        schema:
          type: string
          enum:
          - CREATE
          - DELETE
          - EMAIL_VERIFICATION
          - KYC_APPROVED
          - KYC_REJECTED
          - LOGIN
          - LOGOUT
          - PASSWORD_CHANGE
          - PAYMENT_PROCESSING
          - PERMISSION_CHANGE
          - ROLE_ASSIGNMENT
          - ROLE_REMOVAL
          - ROLE_REQUEST_APPROVED
          - ROLE_REQUEST_REJECTED
          - UPDATE
        description: |-
          * `CREATE` - Create
          * `UPDATE` - Update
          * `DELETE` - Delete
          * `LOGIN` - Login
          * `LOGOUT` - Logout
          * `PASSWORD_CHANGE` - Password Change
          * `ROLE_ASSIGNMENT` - Role Assignment
          * `ROLE_REMOVAL` - Role Removal
          * `PERMISSION_CHANGE` - Permission Change
          * `EMAIL_VERIFICATION` - Email Verification
          * `PAYMENT_PROCESSING` - Payment Processing
          * `ROLE_REQUEST_APPROVED` - Role Request Approved
          * `ROLE_REQUEST_REJECTED` - Role Request Rejected
          * `KYC_APPROVED` - KYC Approved
          * `KYC_REJECTED` - KYC Rejected
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: resource_type
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogList'
          description: ''
  /api/me/audit-logs/{id}/:
    get:
      operationId: api_me_audit_logs_retrieve
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Audit Log.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLog'
          description: ''
  /api/me/auth/login/:
    post:
      operationId: api_me_auth_login_create
      description: User login endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/logout/:
    post:
      operationId: api_me_auth_logout_create
      description: User logout endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/password/forgot/:
    post:
      operationId: api_me_auth_password_forgot_create
      description: Request password reset endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/password/reset/confirm/:
    post:
      operationId: api_me_auth_password_reset_confirm_create
      description: Confirm password reset endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/refresh/:
    post:
      operationId: api_me_auth_refresh_create
      description: Refresh JWT token endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/register/:
    post:
      operationId: api_me_auth_register_create
      description: User registration endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/auth/verify-email/:
    post:
      operationId: api_me_auth_verify_email_create
      description: Email verification endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/me/role-requests/:
    get:
      operationId: api_me_role_requests_list
      description: Role request management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleRequestList'
          description: ''
    post:
      operationId: api_me_role_requests_create
      description: Role request management
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestCreate'
          description: ''
  /api/me/role-requests/{id}/:
    get:
      operationId: api_me_role_requests_retrieve
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    put:
      operationId: api_me_role_requests_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    patch:
      operationId: api_me_role_requests_partial_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    delete:
      operationId: api_me_role_requests_destroy
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/role-requests/{id}/approve/:
    patch:
      operationId: api_me_role_requests_approve_partial_update
      description: Approve role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/me/role-requests/{id}/reject/:
    patch:
      operationId: api_me_role_requests_reject_partial_update
      description: Reject role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/me/role-requests/mine/:
    get:
      operationId: api_me_role_requests_mine_retrieve
      description: Get current user's role requests
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
  /api/me/roles/:
    get:
      operationId: api_me_roles_list
      description: User role management endpoints
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_primary
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role_type
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: api_me_roles_create
      description: User role management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/me/roles/{id}/:
    get:
      operationId: api_me_roles_retrieve
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: api_me_roles_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    patch:
      operationId: api_me_roles_partial_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: api_me_roles_destroy
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/users/:
    get:
      operationId: api_me_users_list
      description: User management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserProfileList'
          description: ''
    post:
      operationId: api_me_users_create
      description: User management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/me/users/{id}/:
    get:
      operationId: api_me_users_retrieve
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_me_users_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    patch:
      operationId: api_me_users_partial_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    delete:
      operationId: api_me_users_destroy
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/users/{id}/change-password/:
    post:
      operationId: api_me_users_change_password_create
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/me/users/{id}/change_password/:
    post:
      operationId: api_me_users_change_password_create_2
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/me/users/{id}/update-role/:
    patch:
      operationId: api_me_users_update_role_partial_update
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/me/users/{id}/update_role/:
    patch:
      operationId: api_me_users_update_role_partial_update_2
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/me/users/me/:
    get:
      operationId: api_me_users_me_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_me_users_me_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/notifications/messages/messages/:
    get:
      operationId: api_notifications_messages_messages_list
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageList'
          description: ''
    post:
      operationId: api_notifications_messages_messages_create
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/notifications/messages/messages/{id}/:
    get:
      operationId: api_notifications_messages_messages_retrieve
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    put:
      operationId: api_notifications_messages_messages_update
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    patch:
      operationId: api_notifications_messages_messages_partial_update
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    delete:
      operationId: api_notifications_messages_messages_destroy
      description: |-
        ViewSet for individual messages.
        Users can edit/delete their own messages.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications/messages/threads/:
    get:
      operationId: api_notifications_messages_threads_list
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageThreadList'
          description: ''
    post:
      operationId: api_notifications_messages_threads_create
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThreadCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThreadCreate'
          description: ''
  /api/notifications/messages/threads/{id}/:
    get:
      operationId: api_notifications_messages_threads_retrieve
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    put:
      operationId: api_notifications_messages_threads_update
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    patch:
      operationId: api_notifications_messages_threads_partial_update
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessageThread'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
    delete:
      operationId: api_notifications_messages_threads_destroy
      description: |-
        ViewSet for message threads.
        Users can create threads and view threads they participate in.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications/messages/threads/{id}/add_participant/:
    post:
      operationId: api_notifications_messages_threads_add_participant_create
      description: Add participant to thread
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/notifications/messages/threads/{id}/messages/:
    get:
      operationId: api_notifications_messages_threads_messages_retrieve
      description: Get messages for a thread
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/notifications/messages/threads/{id}/participants/{user_id}/:
    delete:
      operationId: api_notifications_messages_threads_participants_destroy
      description: Remove participant from thread
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications/messages/threads/{id}/send_message/:
    post:
      operationId: api_notifications_messages_threads_send_message_create
      description: Send message to thread
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageThread'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageThread'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageThread'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageThread'
          description: ''
  /api/notifications/notify/:
    get:
      operationId: api_notifications_notify_list
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
    post:
      operationId: api_notifications_notify_create
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/notify/{id}/:
    get:
      operationId: api_notifications_notify_retrieve
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: api_notifications_notify_update
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: api_notifications_notify_partial_update
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    delete:
      operationId: api_notifications_notify_destroy
      description: |-
        ViewSet for notifications.
        Users can read their own notifications and mark them as read.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications/notify/{id}/mark_read/:
    post:
      operationId: api_notifications_notify_mark_read_create
      description: Mark a specific notification as read
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/notify/announce/:
    post:
      operationId: api_notifications_notify_announce_create
      description: Create announcement and fan-out to participants
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/notifications/notify/mark_all_read/:
    post:
      operationId: api_notifications_notify_mark_all_read_create
      description: Mark all notifications as read
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/public/events/:
    get:
      operationId: api_public_events_list
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: sport
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELLED
          - COMPLETED
          - ONGOING
          - UPCOMING
        description: |-
          Event status

          * `UPCOMING` - Upcoming
          * `ONGOING` - Ongoing
          * `COMPLETED` - Completed
          * `CANCELLED` - Cancelled
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventListList'
          description: ''
    post:
      operationId: api_public_events_create
      description: Event ViewSet with RBAC and lifecycle management
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{event_id}/fixtures/:
    get:
      operationId: api_public_events_fixtures_retrieve
      description: Get fixtures for an event (for schedule/results pages)
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{event_pk}/divisions/:
    get:
      operationId: api_public_events_divisions_list
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDivisionList'
          description: ''
    post:
      operationId: api_public_events_divisions_create
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Division'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Division'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
  /api/public/events/{event_pk}/divisions/{id}/:
    get:
      operationId: api_public_events_divisions_retrieve
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    put:
      operationId: api_public_events_divisions_update
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Division'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Division'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Division'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    patch:
      operationId: api_public_events_divisions_partial_update
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDivision'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
          description: ''
    delete:
      operationId: api_public_events_divisions_destroy
      description: Division ViewSet for managing event divisions
      parameters:
      - in: path
        name: event_pk
        schema:
          type: integer
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/public/events/{id}/:
    get:
      operationId: api_public_events_retrieve
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    put:
      operationId: api_public_events_update
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    patch:
      operationId: api_public_events_partial_update
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    delete:
      operationId: api_public_events_destroy
      description: Event ViewSet with RBAC and lifecycle management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/public/events/{id}/cancel/:
    post:
      operationId: api_public_events_cancel_create
      description: Cancel an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{id}/fixtures/:
    get:
      operationId: api_public_events_fixtures_retrieve_2
      description: Get fixtures for an event (for schedule/results pages)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{id}/fixtures/generate/:
    post:
      operationId: api_public_events_fixtures_generate_create
      description: Generate fixtures for an event (Round Robin or Knockout)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{id}/publish/:
    post:
      operationId: api_public_events_publish_create
      description: Publish a draft event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{id}/registrations/:
    get:
      operationId: api_public_events_registrations_retrieve
      description: Get or create registrations for an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    post:
      operationId: api_public_events_registrations_create
      description: Get or create registrations for an event
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/public/events/{id}/unpublish/:
    post:
      operationId: api_public_events_unpublish_create
      description: Unpublish an event (return to draft)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/registrations/:
    get:
      operationId: api_registrations_list
      description: ViewSet for registration management
      parameters:
      - in: query
        name: event
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - APPROVED
          - PENDING
          - REJECTED
        description: |-
          * `PENDING` - Pending
          * `APPROVED` - Approved
          * `REJECTED` - Rejected
      - in: query
        name: type
        schema:
          type: string
          enum:
          - ATHLETE
          - TEAM
        description: |-
          * `TEAM` - Team
          * `ATHLETE` - Athlete
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationListList'
          description: ''
    post:
      operationId: api_registrations_create
      description: Create a new registration
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCreate'
          description: ''
  /api/registrations/{id}/:
    get:
      operationId: api_registrations_retrieve
      description: ViewSet for registration management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    put:
      operationId: api_registrations_update
      description: ViewSet for registration management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    patch:
      operationId: api_registrations_partial_update
      description: ViewSet for registration management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
    delete:
      operationId: api_registrations_destroy
      description: ViewSet for registration management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/registrations/{id}/approve/:
    patch:
      operationId: api_registrations_approve_partial_update
      description: Approve registration (organizer only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/pay/:
    post:
      operationId: api_registrations_pay_create
      description: Create payment order for registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/pay_confirm/:
    post:
      operationId: api_registrations_pay_confirm_create
      description: Confirm payment for registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/pay_intent/:
    post:
      operationId: api_registrations_pay_intent_create
      description: Create payment intent for registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/payment_status/:
    get:
      operationId: api_registrations_payment_status_retrieve
      description: Get payment status for registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/reject/:
    patch:
      operationId: api_registrations_reject_partial_update
      description: Reject registration (organizer only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/request_reupload/:
    patch:
      operationId: api_registrations_request_reupload_partial_update
      description: Request document reupload
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/status/:
    get:
      operationId: api_registrations_status_retrieve
      description: Get registration status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/waitlist/:
    patch:
      operationId: api_registrations_waitlist_partial_update
      description: Waitlist a registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{id}/withdraw/:
    patch:
      operationId: api_registrations_withdraw_partial_update
      description: Withdraw a registration
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/registrations/{registration_pk}/documents/:
    get:
      operationId: api_registrations_documents_list
      description: ViewSet for registration document management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationDocumentList'
          description: ''
    post:
      operationId: api_registrations_documents_create
      description: Upload a document for registration
      parameters:
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDocumentUpload'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocumentUpload'
          description: ''
  /api/registrations/{registration_pk}/documents/{id}/:
    get:
      operationId: api_registrations_documents_retrieve
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    put:
      operationId: api_registrations_documents_update
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationDocument'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    patch:
      operationId: api_registrations_documents_partial_update
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationDocument'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDocument'
          description: ''
    delete:
      operationId: api_registrations_documents_destroy
      description: ViewSet for registration document management
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration document.
        required: true
      - in: path
        name: registration_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/registrations/mine/:
    get:
      operationId: api_registrations_mine_retrieve
      description: Get current user's registrations
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetail'
          description: ''
  /api/results/:
    get:
      operationId: api_results_list
      description: ViewSet for managing results
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultList'
          description: ''
    post:
      operationId: api_results_create
      description: ViewSet for managing results
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResultCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResultCreate'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultCreate'
          description: ''
  /api/results/{id}/:
    get:
      operationId: api_results_retrieve
      description: ViewSet for managing results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    put:
      operationId: api_results_update
      description: ViewSet for managing results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    patch:
      operationId: api_results_partial_update
      description: ViewSet for managing results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResult'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResult'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResult'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    delete:
      operationId: api_results_destroy
      description: ViewSet for managing results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/results/{id}/finalize/:
    post:
      operationId: api_results_finalize_create
      description: Finalize a result
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/{id}/lock/:
    post:
      operationId: api_results_lock_create
      description: Lock a result
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/{id}/verify/:
    post:
      operationId: api_results_verify_create
      description: Verify a result
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/event/{event_id}/:
    get:
      operationId: api_results_event_retrieve
      description: Get results and leaderboard for an event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/results/event/{event_id}/leaderboard/:
    get:
      operationId: api_results_event_leaderboard_retrieve
      description: Get leaderboard for an event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/results/event/{event_id}/recent/:
    get:
      operationId: api_results_event_recent_retrieve
      description: Get recent results for an event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/results/event/{event_id}/recompute/:
    post:
      operationId: api_results_event_recompute_create
      description: Recompute standings for an event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/results/fixtures/{fixture_id}/provisional/:
    post:
      operationId: api_results_fixtures_provisional_create
      description: Record a result for a fixture
      parameters:
      - in: path
        name: fixture_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/results/fixtures/{fixture_id}/record/:
    post:
      operationId: api_results_fixtures_record_create
      description: Record a result for a fixture
      parameters:
      - in: path
        name: fixture_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/results/leaderboard/:
    get:
      operationId: api_results_leaderboard_list
      description: ViewSet for leaderboard entries
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLeaderboardEntryList'
          description: ''
  /api/results/leaderboard/{id}/:
    get:
      operationId: api_results_leaderboard_retrieve
      description: ViewSet for leaderboard entries
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this leaderboard entry.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardEntry'
          description: ''
  /api/results/public/results/:
    get:
      operationId: api_results_public_results_list
      description: FR44 — Public results.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultList'
          description: ''
  /api/results/public/results/{id}/:
    get:
      operationId: api_results_public_results_retrieve
      description: FR44 — Public results.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/sports/:
    get:
      operationId: api_sports_list
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSportList'
          description: ''
    post:
      operationId: api_sports_create
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
          description: ''
  /api/sports/{id}/:
    get:
      operationId: api_sports_retrieve
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sport.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
          description: ''
    put:
      operationId: api_sports_update
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sport.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
          description: ''
    patch:
      operationId: api_sports_partial_update
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sport.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSport'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
          description: ''
    delete:
      operationId: api_sports_destroy
      description: |-
        ViewSet for managing sports.

        Provides CRUD operations for sports with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Sport.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/teams/:
    get:
      operationId: api_teams_list
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      parameters:
      - in: query
        name: coach
        schema:
          type: integer
      - in: query
        name: event
        schema:
          type: integer
      - in: query
        name: manager
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamList'
          description: ''
    post:
      operationId: api_teams_create
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
  /api/teams/{id}/:
    get:
      operationId: api_teams_retrieve
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    put:
      operationId: api_teams_update
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    patch:
      operationId: api_teams_partial_update
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    delete:
      operationId: api_teams_destroy
      description: |-
        ViewSet for managing teams.

        Provides CRUD operations for teams with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/teams/{id}/add_member/:
    post:
      operationId: api_teams_add_member_create
      description: Add a member to the team
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
  /api/teams/{id}/remove_member/:
    delete:
      operationId: api_teams_remove_member_destroy
      description: Remove a member from the team
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/teams/members/:
    get:
      operationId: api_teams_members_list
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      parameters:
      - in: query
        name: athlete
        schema:
          type: integer
      - in: query
        name: is_captain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: team
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamMemberList'
          description: ''
    post:
      operationId: api_teams_members_create
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamMember'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: ''
  /api/teams/members/{id}/:
    get:
      operationId: api_teams_members_retrieve
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team Member.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: ''
    put:
      operationId: api_teams_members_update
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team Member.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamMember'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: ''
    patch:
      operationId: api_teams_members_partial_update
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team Member.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeamMember'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeamMember'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeamMember'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: ''
    delete:
      operationId: api_teams_members_destroy
      description: |-
        ViewSet for managing team members.

        Provides CRUD operations for team members with proper RBAC.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Team Member.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_users_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/users/admin/users/:
    get:
      operationId: api_users_admin_users_list
      description: Admin user management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserListList'
          description: ''
    post:
      operationId: api_users_admin_users_create
      description: Admin user management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/users/admin/users/{id}/:
    get:
      operationId: api_users_admin_users_retrieve
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    put:
      operationId: api_users_admin_users_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    patch:
      operationId: api_users_admin_users_partial_update
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
    delete:
      operationId: api_users_admin_users_destroy
      description: Admin user management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/admin/users/{id}/assign-role/:
    post:
      operationId: api_users_admin_users_assign_role_create
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/users/admin/users/{id}/assign_role/:
    post:
      operationId: api_users_admin_users_assign_role_create_2
      description: Assign role to user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: ''
  /api/users/admin/users/{id}/delete-user/:
    delete:
      operationId: api_users_admin_users_delete_user_destroy
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/admin/users/{id}/delete_user/:
    delete:
      operationId: api_users_admin_users_delete_user_destroy_2
      description: Delete user (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/audit-logs/:
    get:
      operationId: api_users_audit_logs_list
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: query
        name: action
        schema:
          type: string
          enum:
          - CREATE
          - DELETE
          - EMAIL_VERIFICATION
          - KYC_APPROVED
          - KYC_REJECTED
          - LOGIN
          - LOGOUT
          - PASSWORD_CHANGE
          - PAYMENT_PROCESSING
          - PERMISSION_CHANGE
          - ROLE_ASSIGNMENT
          - ROLE_REMOVAL
          - ROLE_REQUEST_APPROVED
          - ROLE_REQUEST_REJECTED
          - UPDATE
        description: |-
          * `CREATE` - Create
          * `UPDATE` - Update
          * `DELETE` - Delete
          * `LOGIN` - Login
          * `LOGOUT` - Logout
          * `PASSWORD_CHANGE` - Password Change
          * `ROLE_ASSIGNMENT` - Role Assignment
          * `ROLE_REMOVAL` - Role Removal
          * `PERMISSION_CHANGE` - Permission Change
          * `EMAIL_VERIFICATION` - Email Verification
          * `PAYMENT_PROCESSING` - Payment Processing
          * `ROLE_REQUEST_APPROVED` - Role Request Approved
          * `ROLE_REQUEST_REJECTED` - Role Request Rejected
          * `KYC_APPROVED` - KYC Approved
          * `KYC_REJECTED` - KYC Rejected
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: resource_type
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogList'
          description: ''
  /api/users/audit-logs/{id}/:
    get:
      operationId: api_users_audit_logs_retrieve
      description: Audit log viewing endpoints (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Audit Log.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLog'
          description: ''
  /api/users/auth/login/:
    post:
      operationId: api_users_auth_login_create
      description: User login endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/logout/:
    post:
      operationId: api_users_auth_logout_create
      description: User logout endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/password/forgot/:
    post:
      operationId: api_users_auth_password_forgot_create
      description: Request password reset endpoint with rate limiting
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/password/reset/confirm/:
    post:
      operationId: api_users_auth_password_reset_confirm_create
      description: Confirm password reset endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/refresh/:
    post:
      operationId: api_users_auth_refresh_create
      description: Refresh JWT token endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/register/:
    post:
      operationId: api_users_auth_register_create
      description: User registration endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/auth/verify-email/:
    post:
      operationId: api_users_auth_verify_email_create
      description: Email verification endpoint
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/users/role-requests/:
    get:
      operationId: api_users_role_requests_list
      description: Role request management
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleRequestList'
          description: ''
    post:
      operationId: api_users_role_requests_create
      description: Role request management
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequestCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestCreate'
          description: ''
  /api/users/role-requests/{id}/:
    get:
      operationId: api_users_role_requests_retrieve
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    put:
      operationId: api_users_role_requests_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    patch:
      operationId: api_users_role_requests_partial_update
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
    delete:
      operationId: api_users_role_requests_destroy
      description: Role request management
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/role-requests/{id}/approve/:
    patch:
      operationId: api_users_role_requests_approve_partial_update
      description: Approve role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/users/role-requests/{id}/reject/:
    patch:
      operationId: api_users_role_requests_reject_partial_update
      description: Reject role request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleRequestReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequestReview'
          description: ''
  /api/users/role-requests/mine/:
    get:
      operationId: api_users_role_requests_mine_retrieve
      description: Get current user's role requests
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRequest'
          description: ''
  /api/users/roles/:
    get:
      operationId: api_users_roles_list
      description: User role management endpoints
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_primary
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role_type
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserRoleList'
          description: ''
    post:
      operationId: api_users_roles_create
      description: User role management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
  /api/users/roles/{id}/:
    get:
      operationId: api_users_roles_retrieve
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    put:
      operationId: api_users_roles_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    patch:
      operationId: api_users_roles_partial_update
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRole'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
    delete:
      operationId: api_users_roles_destroy
      description: User role management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User Role.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/users/:
    get:
      operationId: api_users_users_list
      description: User management endpoints
      parameters:
      - in: query
        name: email_verified
        schema:
          type: boolean
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: role
        schema:
          type: string
          enum:
          - ADMIN
          - ATHLETE
          - COACH
          - ORGANIZER
          - SPECTATOR
        description: |-
          * `ADMIN` - Administrator
          * `ORGANIZER` - Event Organizer
          * `COACH` - Coach
          * `ATHLETE` - Athlete
          * `SPECTATOR` - Spectator
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserProfileList'
          description: ''
    post:
      operationId: api_users_users_create
      description: User management endpoints
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/users/{id}/:
    get:
      operationId: api_users_users_retrieve
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_users_users_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    patch:
      operationId: api_users_users_partial_update
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
    delete:
      operationId: api_users_users_destroy
      description: User management endpoints
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/users/{id}/change-password/:
    post:
      operationId: api_users_users_change_password_create
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/users/{id}/change_password/:
    post:
      operationId: api_users_users_change_password_create_2
      description: Change user password
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/users/{id}/update-role/:
    patch:
      operationId: api_users_users_update_role_partial_update
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/users/{id}/update_role/:
    patch:
      operationId: api_users_users_update_role_partial_update_2
      description: Update user role (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/users/users/me/:
    get:
      operationId: api_users_users_me_retrieve
      description: Get or update current user profile
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
    patch:
      operationId: api_users_users_me_partial_update
      description: Get or update current user profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileWithKyc'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileWithKyc'
          description: ''
  /api/venues/:
    get:
      operationId: api_venues_list
      description: ViewSet for venue CRUD operations.
      parameters:
      - in: query
        name: capacity
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVenueListList'
          description: ''
    post:
      operationId: api_venues_create
      description: ViewSet for venue CRUD operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Venue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /api/venues/{id}/:
    get:
      operationId: api_venues_retrieve
      description: ViewSet for venue CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    put:
      operationId: api_venues_update
      description: ViewSet for venue CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Venue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    patch:
      operationId: api_venues_partial_update
      description: ViewSet for venue CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVenue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVenue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVenue'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    delete:
      operationId: api_venues_destroy
      description: ViewSet for venue CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/venues/{id}/availability/:
    get:
      operationId: api_venues_availability_retrieve
      description: Get venue availability for a date range
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /api/venues/{id}/slots/:
    post:
      operationId: api_venues_slots_create
      description: Add availability slots to a venue
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this venue.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Venue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /api/venues/{venue_pk}/slots/:
    get:
      operationId: api_venues_slots_list
      description: ViewSet for venue slot operations.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - available
          - blocked
        description: |-
          Slot availability status

          * `available` - Available
          * `blocked` - Blocked
      - in: query
        name: venue
        schema:
          type: integer
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVenueSlotList'
          description: ''
    post:
      operationId: api_venues_slots_create_2
      description: ViewSet for venue slot operations.
      parameters:
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueSlot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueSlot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueSlot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueSlot'
          description: ''
  /api/venues/{venue_pk}/slots/{id}/:
    get:
      operationId: api_venues_slots_retrieve
      description: ViewSet for venue slot operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueSlot'
          description: ''
    put:
      operationId: api_venues_slots_update
      description: Update a venue slot with conflict checking
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueSlot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueSlot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueSlot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueSlot'
          description: ''
    patch:
      operationId: api_venues_slots_partial_update
      description: ViewSet for venue slot operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVenueSlot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVenueSlot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVenueSlot'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueSlot'
          description: ''
    delete:
      operationId: api_venues_slots_destroy
      description: ViewSet for venue slot operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: venue_pk
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/venues/check-conflicts/:
    post:
      operationId: api_venues_check_conflicts_create
      description: Check for conflicts with a proposed slot
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Venue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /health/:
    get:
      operationId: health_retrieve
      description: Get system health status
      tags:
      - health
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    AuditLog:
      type: object
      description: Serializer for audit logs
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          nullable: true
        user_display:
          type: string
          readOnly: true
        action:
          $ref: '#/components/schemas/AuditLogActionEnum'
        action_display:
          type: string
          readOnly: true
        resource_type:
          type: string
          description: Type of resource being acted upon
          maxLength: 100
        resource_id:
          type: string
          description: ID of the resource
          maxLength: 100
        details: {}
        ip_address:
          type: string
          nullable: true
        user_agent:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - action_display
      - created_at
      - id
      - resource_type
      - user
      - user_display
    AuditLogActionEnum:
      enum:
      - CREATE
      - UPDATE
      - DELETE
      - LOGIN
      - LOGOUT
      - PASSWORD_CHANGE
      - ROLE_ASSIGNMENT
      - ROLE_REMOVAL
      - PERMISSION_CHANGE
      - EMAIL_VERIFICATION
      - PAYMENT_PROCESSING
      - ROLE_REQUEST_APPROVED
      - ROLE_REQUEST_REJECTED
      - KYC_APPROVED
      - KYC_REJECTED
      type: string
      description: |-
        * `CREATE` - Create
        * `UPDATE` - Update
        * `DELETE` - Delete
        * `LOGIN` - Login
        * `LOGOUT` - Logout
        * `PASSWORD_CHANGE` - Password Change
        * `ROLE_ASSIGNMENT` - Role Assignment
        * `ROLE_REMOVAL` - Role Removal
        * `PERMISSION_CHANGE` - Permission Change
        * `EMAIL_VERIFICATION` - Email Verification
        * `PAYMENT_PROCESSING` - Payment Processing
        * `ROLE_REQUEST_APPROVED` - Role Request Approved
        * `ROLE_REQUEST_REJECTED` - Role Request Rejected
        * `KYC_APPROVED` - KYC Approved
        * `KYC_REJECTED` - KYC Rejected
    Division:
      type: object
      description: Serializer for event divisions
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Division name
          maxLength: 100
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Sort order for display
      required:
      - id
      - name
    DocTypeEnum:
      enum:
      - id_card
      - medical_clearance
      - other
      type: string
      description: |-
        * `id_card` - ID Card
        * `medical_clearance` - Medical Clearance
        * `other` - Other
    Event:
      type: object
      description: Main event serializer with computed phase field
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Event name
          maxLength: 200
        sport:
          type: integer
          description: Sport type
        description:
          type: string
          description: Event description
        start_date:
          type: string
          format: date-time
          description: Event start date and time
        end_date:
          type: string
          format: date-time
          description: Event end date and time
        venue:
          type: integer
          nullable: true
          description: Associated venue (optional)
        eligibility:
          description: Eligibility criteria (JSON)
        status:
          allOf:
          - $ref: '#/components/schemas/StatusAcbEnum'
          description: |-
            Event status

            * `UPCOMING` - Upcoming
            * `ONGOING` - Ongoing
            * `COMPLETED` - Completed
            * `CANCELLED` - Cancelled
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityEnum'
          description: |-
            Event visibility

            * `PUBLIC` - Public
            * `PRIVATE` - Private
        phase:
          type: string
          description: Computed event phase
          readOnly: true
        is_published:
          type: string
          readOnly: true
          description: Whether event is published
        created_by:
          type: integer
          readOnly: true
          description: User who created this event
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        divisions:
          type: array
          items:
            $ref: '#/components/schemas/Division'
          readOnly: true
      required:
      - created_at
      - created_by
      - created_by_name
      - divisions
      - end_date
      - id
      - is_published
      - name
      - phase
      - sport
      - start_date
      - updated_at
    EventList:
      type: object
      description: Lightweight serializer for event lists
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Event name
          maxLength: 200
        sport:
          type: integer
          description: Sport type
        description:
          type: string
          description: Event description
        start_date:
          type: string
          format: date-time
          description: Event start date and time
        end_date:
          type: string
          format: date-time
          description: Event end date and time
        venue:
          type: integer
          nullable: true
          description: Associated venue (optional)
        status:
          allOf:
          - $ref: '#/components/schemas/StatusAcbEnum'
          description: |-
            Event status

            * `UPCOMING` - Upcoming
            * `ONGOING` - Ongoing
            * `COMPLETED` - Completed
            * `CANCELLED` - Cancelled
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityEnum'
          description: |-
            Event visibility

            * `PUBLIC` - Public
            * `PRIVATE` - Private
        phase:
          type: string
          description: Compute event phase based on current time and event dates
          readOnly: true
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by_name
      - end_date
      - id
      - name
      - phase
      - sport
      - start_date
    Fixture:
      type: object
      description: Serializer for Fixture CRUD operations
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
          description: Event this fixture belongs to
        event_name:
          type: string
          readOnly: true
        round:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Round number in tournament
        phase:
          allOf:
          - $ref: '#/components/schemas/PhaseEnum'
          description: |-
            Tournament phase

            * `RR` - Round Robin
            * `KO` - Knockout
        start_at:
          type: string
          format: date-time
          description: Fixture start time
        venue:
          type: integer
          nullable: true
          description: Fixture venue
        venue_name:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/Status34cEnum'
        home:
          type: integer
          nullable: true
          description: Home team
        home_team_name:
          type: string
          readOnly: true
        away:
          type: integer
          nullable: true
          description: Away team
        away_team_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - away_team_name
      - created_at
      - event
      - event_name
      - home_team_name
      - id
      - start_at
      - updated_at
      - venue_name
    FixtureList:
      type: object
      description: Lightweight serializer for fixture lists
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
          description: Event this fixture belongs to
        round:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Round number in tournament
        phase:
          allOf:
          - $ref: '#/components/schemas/PhaseEnum'
          description: |-
            Tournament phase

            * `RR` - Round Robin
            * `KO` - Knockout
        start_at:
          type: string
          format: date-time
          description: Fixture start time
        venue:
          type: integer
          nullable: true
          description: Fixture venue
        venue_name:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/Status34cEnum'
        home_team_name:
          type: string
          readOnly: true
        away_team_name:
          type: string
          readOnly: true
      required:
      - away_team_name
      - event
      - home_team_name
      - id
      - start_at
      - venue_name
    KindEnum:
      enum:
      - info
      - success
      - warning
      - error
      - announcement
      type: string
      description: |-
        * `info` - Info
        * `success` - Success
        * `warning` - Warning
        * `error` - Error
        * `announcement` - Announcement
    LeaderboardEntry:
      type: object
      description: Serializer for LeaderboardEntry model
      properties:
        id:
          type: integer
          readOnly: true
        event_id:
          type: integer
          readOnly: true
        event_name:
          type: string
          readOnly: true
        team_id:
          type: integer
          readOnly: true
        team_name:
          type: string
          readOnly: true
        pts:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Total points (3 for win, 1 for draw)
        w:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Number of wins
        d:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Number of draws
        l:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Number of losses
        gf:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Goals scored
        ga:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Goals conceded
        gd:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: Goal difference (GF - GA)
        win_percentage:
          type: number
          format: double
          readOnly: true
        points_per_match:
          type: number
          format: double
          readOnly: true
        matches_played:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - event_id
      - event_name
      - id
      - matches_played
      - points_per_match
      - team_id
      - team_name
      - updated_at
      - win_percentage
    Message:
      type: object
      description: Serializer for messages
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        thread:
          type: string
          format: uuid
        sender:
          type: integer
          readOnly: true
        sender_email:
          type: string
          format: email
          readOnly: true
        sender_name:
          type: string
          readOnly: true
        body:
          type: string
          maxLength: 2000
        created_at:
          type: string
          format: date-time
          readOnly: true
        edited_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_deleted:
          type: boolean
          readOnly: true
      required:
      - body
      - created_at
      - deleted_at
      - edited_at
      - id
      - is_deleted
      - sender
      - sender_email
      - sender_name
      - thread
    MessageParticipant:
      type: object
      description: Serializer for message participants
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
        user_email:
          type: string
          format: email
          readOnly: true
        user_name:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/MessageParticipantRoleEnum'
        last_read_at:
          type: string
          format: date-time
          nullable: true
        joined_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - joined_at
      - user
      - user_email
      - user_name
    MessageParticipantRoleEnum:
      enum:
      - organizer
      - participant
      - admin
      type: string
      description: |-
        * `organizer` - Organizer
        * `participant` - Participant
        * `admin` - Admin
    MessageThread:
      type: object
      description: Serializer for message threads
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        scope:
          $ref: '#/components/schemas/ScopeEnum'
        scope_id:
          type: string
          nullable: true
          maxLength: 100
        title:
          type: string
          nullable: true
          maxLength: 200
        created_by:
          type: integer
          readOnly: true
        created_by_email:
          type: string
          format: email
          readOnly: true
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MessageParticipant'
          readOnly: true
        participant_count:
          type: string
          readOnly: true
        last_message:
          type: string
          readOnly: true
        unread_count:
          type: string
          readOnly: true
      required:
      - created_at
      - created_by
      - created_by_email
      - created_by_name
      - id
      - last_message
      - participant_count
      - participants
      - scope
      - unread_count
    MessageThreadCreate:
      type: object
      description: Serializer for creating message threads
      properties:
        scope:
          $ref: '#/components/schemas/ScopeEnum'
        scope_id:
          type: string
          nullable: true
          maxLength: 100
        title:
          type: string
          nullable: true
          maxLength: 200
        participant_ids:
          type: array
          items:
            type: integer
          writeOnly: true
      required:
      - scope
    Notification:
      type: object
      description: Serializer for notifications
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        kind:
          $ref: '#/components/schemas/KindEnum'
        topic:
          $ref: '#/components/schemas/TopicEnum'
        title:
          type: string
          maxLength: 200
        body:
          type: string
        link_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        delivered_email:
          type: boolean
          readOnly: true
        delivered_sms:
          type: boolean
          readOnly: true
        is_read:
          type: string
          readOnly: true
        read_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - body
      - created_at
      - delivered_email
      - delivered_sms
      - id
      - is_read
      - read_at
      - title
    PaginatedAuditLogList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
    PaginatedDivisionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Division'
    PaginatedEventListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EventList'
    PaginatedFixtureListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FixtureList'
    PaginatedLeaderboardEntryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
    PaginatedMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PaginatedMessageThreadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MessageThread'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PaginatedRegistrationDocumentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationDocument'
    PaginatedRegistrationListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationList'
    PaginatedResultList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
    PaginatedRoleRequestList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RoleRequest'
    PaginatedSportList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
    PaginatedTeamList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Team'
    PaginatedTeamMemberList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
    PaginatedUserListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserList'
    PaginatedUserProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
    PaginatedUserRoleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    PaginatedVenueListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VenueList'
    PaginatedVenueSlotList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VenueSlot'
    PatchedDivision:
      type: object
      description: Serializer for event divisions
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Division name
          maxLength: 100
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Sort order for display
    PatchedEvent:
      type: object
      description: Main event serializer with computed phase field
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Event name
          maxLength: 200
        sport:
          type: integer
          description: Sport type
        description:
          type: string
          description: Event description
        start_date:
          type: string
          format: date-time
          description: Event start date and time
        end_date:
          type: string
          format: date-time
          description: Event end date and time
        venue:
          type: integer
          nullable: true
          description: Associated venue (optional)
        eligibility:
          description: Eligibility criteria (JSON)
        status:
          allOf:
          - $ref: '#/components/schemas/StatusAcbEnum'
          description: |-
            Event status

            * `UPCOMING` - Upcoming
            * `ONGOING` - Ongoing
            * `COMPLETED` - Completed
            * `CANCELLED` - Cancelled
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityEnum'
          description: |-
            Event visibility

            * `PUBLIC` - Public
            * `PRIVATE` - Private
        phase:
          type: string
          description: Computed event phase
          readOnly: true
        is_published:
          type: string
          readOnly: true
          description: Whether event is published
        created_by:
          type: integer
          readOnly: true
          description: User who created this event
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        divisions:
          type: array
          items:
            $ref: '#/components/schemas/Division'
          readOnly: true
    PatchedFixture:
      type: object
      description: Serializer for Fixture CRUD operations
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
          description: Event this fixture belongs to
        event_name:
          type: string
          readOnly: true
        round:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Round number in tournament
        phase:
          allOf:
          - $ref: '#/components/schemas/PhaseEnum'
          description: |-
            Tournament phase

            * `RR` - Round Robin
            * `KO` - Knockout
        start_at:
          type: string
          format: date-time
          description: Fixture start time
        venue:
          type: integer
          nullable: true
          description: Fixture venue
        venue_name:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/Status34cEnum'
        home:
          type: integer
          nullable: true
          description: Home team
        home_team_name:
          type: string
          readOnly: true
        away:
          type: integer
          nullable: true
          description: Away team
        away_team_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedMessage:
      type: object
      description: Serializer for messages
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        thread:
          type: string
          format: uuid
        sender:
          type: integer
          readOnly: true
        sender_email:
          type: string
          format: email
          readOnly: true
        sender_name:
          type: string
          readOnly: true
        body:
          type: string
          maxLength: 2000
        created_at:
          type: string
          format: date-time
          readOnly: true
        edited_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_deleted:
          type: boolean
          readOnly: true
    PatchedMessageThread:
      type: object
      description: Serializer for message threads
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        scope:
          $ref: '#/components/schemas/ScopeEnum'
        scope_id:
          type: string
          nullable: true
          maxLength: 100
        title:
          type: string
          nullable: true
          maxLength: 200
        created_by:
          type: integer
          readOnly: true
        created_by_email:
          type: string
          format: email
          readOnly: true
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MessageParticipant'
          readOnly: true
        participant_count:
          type: string
          readOnly: true
        last_message:
          type: string
          readOnly: true
        unread_count:
          type: string
          readOnly: true
    PatchedNotification:
      type: object
      description: Serializer for notifications
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        kind:
          $ref: '#/components/schemas/KindEnum'
        topic:
          $ref: '#/components/schemas/TopicEnum'
        title:
          type: string
          maxLength: 200
        body:
          type: string
        link_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        delivered_email:
          type: boolean
          readOnly: true
        delivered_sms:
          type: boolean
          readOnly: true
        is_read:
          type: string
          readOnly: true
        read_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRegistrationDetail:
      type: object
      description: Serializer for registration detail views
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
        type:
          $ref: '#/components/schemas/TypeEnum'
        team:
          type: integer
          nullable: true
        applicant:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/Status1f0Enum'
        docs:
          description: Registration documents (JSON)
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        decided_at:
          type: string
          format: date-time
          nullable: true
        decided_by:
          type: integer
          nullable: true
        reason:
          type: string
          description: Reason for rejection or other notes
        documents:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationDocument'
          readOnly: true
    PatchedRegistrationDocument:
      type: object
      description: Serializer for registration documents
      properties:
        id:
          type: integer
          readOnly: true
        doc_type:
          $ref: '#/components/schemas/DocTypeEnum'
        file:
          type: string
          format: uri
          pattern: (?:pdf|jpg|jpeg|png|doc|docx)$
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        approved_by:
          type: integer
          readOnly: true
          nullable: true
        approved_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        note:
          type: string
          description: Notes about the document
    PatchedResult:
      type: object
      description: Serializer for Result model
      properties:
        id:
          type: integer
          readOnly: true
        fixture_id:
          type: integer
          readOnly: true
        fixture_name:
          type: string
          readOnly: true
        home_team:
          type: string
          readOnly: true
        away_team:
          type: string
          readOnly: true
        event_name:
          type: string
          readOnly: true
        event_id:
          type: integer
          readOnly: true
        home_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Home team score
        away_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Away team score
        winner:
          type: integer
          nullable: true
          description: Winning team (null for draws)
        winner_name:
          type: string
          readOnly: true
        stats:
          description: Additional statistics (JSON)
        entered_by:
          type: integer
          nullable: true
          description: User who entered this result
        entered_by_name:
          type: string
          readOnly: true
        entered_by_email:
          type: string
          readOnly: true
        finalized_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: When result was finalized
        is_draw:
          type: boolean
          readOnly: true
        is_finalized:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRoleRequest:
      type: object
      description: Serializer for role requests
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        user_display_name:
          type: string
          readOnly: true
        requested_role:
          $ref: '#/components/schemas/RequestedRoleEnum'
        requested_role_display:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/RoleRequestStatusEnum'
        status_display:
          type: string
          readOnly: true
        note:
          type: string
          description: User's reason for requesting this role
        organization_name:
          type: string
          description: For Organizer role
          maxLength: 200
        organization_website:
          type: string
          format: uri
          description: For Organizer role
          maxLength: 200
        coaching_experience:
          type: string
          description: For Coach role
        sport_discipline:
          type: string
          description: For Athlete role
          maxLength: 100
        reviewed_by_email:
          type: string
          format: email
          readOnly: true
        reviewed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        review_notes:
          type: string
          readOnly: true
        rejection_reason:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRoleRequestReview:
      type: object
      description: Serializer for admin role request review
      properties:
        action:
          $ref: '#/components/schemas/RoleRequestReviewActionEnum'
        notes:
          type: string
        reason:
          type: string
    PatchedSport:
      type: object
      description: Serializer for Sport model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Sport name
          maxLength: 100
        description:
          type: string
          description: Sport description
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTeam:
      type: object
      description: Serializer for Team model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Team name
          maxLength: 100
        manager:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        manager_id:
          type: integer
          writeOnly: true
        coach:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        coach_id:
          type: integer
          writeOnly: true
          nullable: true
        event:
          type: integer
          description: Event this team participates in
        description:
          type: string
          description: Team description
        members:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
          readOnly: true
        member_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTeamMember:
      type: object
      description: Serializer for TeamMember model
      properties:
        id:
          type: integer
          readOnly: true
        athlete:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        athlete_id:
          type: integer
          writeOnly: true
        jersey_no:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Jersey number
        position:
          type: string
          description: Player position
          maxLength: 50
        is_captain:
          type: boolean
          description: Whether this member is the team captain
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserList:
      type: object
      description: Serializer for listing users (admin only)
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        full_name:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        is_active:
          type: boolean
        email_verified:
          type: boolean
        role:
          $ref: '#/components/schemas/RoleB11Enum'
        primary_role_display:
          type: string
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        roles_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
    PatchedUserProfile:
      type: object
      description: Serializer for user profile data
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 150
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        full_name:
          type: string
          readOnly: true
        display_name:
          type: string
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        email_verified:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        phone_number:
          type: string
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        date_of_birth:
          type: string
          format: date
          nullable: true
        address:
          type: string
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        profile_picture:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
        website:
          type: string
          format: uri
          maxLength: 200
        role:
          $ref: '#/components/schemas/RoleB11Enum'
        primary_role_display:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_verified:
          type: string
          readOnly: true
    PatchedUserProfileUpdate:
      type: object
      description: Serializer for updating user profile
      properties:
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        phone_number:
          type: string
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        date_of_birth:
          type: string
          format: date
          nullable: true
        address:
          type: string
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        profile_picture:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
        website:
          type: string
          format: uri
          maxLength: 200
    PatchedUserProfileWithKyc:
      type: object
      description: Extended user profile serializer with KYC status and pending role
        request
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        username:
          type: string
          readOnly: true
          nullable: true
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        full_name:
          type: string
          readOnly: true
        display_name:
          type: string
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/RoleB11Enum'
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        email_verified:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        kyc_status:
          type: string
          readOnly: true
        pending_role_request:
          type: string
          readOnly: true
    PatchedUserRole:
      type: object
      description: Serializer for user roles
      properties:
        id:
          type: integer
          readOnly: true
        role_type:
          $ref: '#/components/schemas/RoleTypeEnum'
        role_type_display:
          type: string
          readOnly: true
        is_primary:
          type: boolean
          description: Primary role for this user
        is_active:
          type: boolean
        can_manage_events:
          type: boolean
        can_manage_teams:
          type: boolean
        can_manage_users:
          type: boolean
        can_manage_fixtures:
          type: boolean
        can_manage_results:
          type: boolean
        can_manage_payments:
          type: boolean
        can_manage_content:
          type: boolean
        can_view_reports:
          type: boolean
        context_type:
          type: string
          description: Type of context (event, team, organization)
          maxLength: 50
        context_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: ID of the context object
        assigned_at:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedVenue:
      type: object
      description: Serializer for Venue CRUD operations
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Unique venue name
          maxLength: 200
        address:
          type: string
          description: Full venue address
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum capacity (0 for unlimited)
        facilities:
          nullable: true
          description: Available facilities (JSON)
        created_by:
          type: integer
          readOnly: true
          description: User who created this venue
        created_by_name:
          type: string
          readOnly: true
        slot_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedVenueSlot:
      type: object
      description: Serializer for VenueSlot operations
      properties:
        id:
          type: integer
          readOnly: true
        venue:
          type: integer
          description: Venue this slot belongs to
        venue_name:
          type: string
          readOnly: true
        starts_at:
          type: string
          format: date-time
          description: Slot start time
        ends_at:
          type: string
          format: date-time
          description: Slot end time
        status:
          allOf:
          - $ref: '#/components/schemas/VenueSlotStatusEnum'
          description: |-
            Slot availability status

            * `available` - Available
            * `blocked` - Blocked
        reason:
          type: string
          nullable: true
          description: Reason for blocking (if applicable)
        duration_minutes:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PhaseEnum:
      enum:
      - RR
      - KO
      type: string
      description: |-
        * `RR` - Round Robin
        * `KO` - Knockout
    RegistrationCreate:
      type: object
      description: Serializer for creating registrations
      properties:
        event:
          type: integer
        type:
          $ref: '#/components/schemas/TypeEnum'
        team:
          type: integer
          nullable: true
        applicant:
          type: integer
          nullable: true
        docs:
          description: Registration documents (JSON)
      required:
      - event
    RegistrationDetail:
      type: object
      description: Serializer for registration detail views
      properties:
        id:
          type: integer
          readOnly: true
        event:
          type: integer
        type:
          $ref: '#/components/schemas/TypeEnum'
        team:
          type: integer
          nullable: true
        applicant:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/Status1f0Enum'
        docs:
          description: Registration documents (JSON)
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        decided_at:
          type: string
          format: date-time
          nullable: true
        decided_by:
          type: integer
          nullable: true
        reason:
          type: string
          description: Reason for rejection or other notes
        documents:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationDocument'
          readOnly: true
      required:
      - documents
      - event
      - id
      - submitted_at
    RegistrationDocument:
      type: object
      description: Serializer for registration documents
      properties:
        id:
          type: integer
          readOnly: true
        doc_type:
          $ref: '#/components/schemas/DocTypeEnum'
        file:
          type: string
          format: uri
          pattern: (?:pdf|jpg|jpeg|png|doc|docx)$
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        approved_by:
          type: integer
          readOnly: true
          nullable: true
        approved_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        note:
          type: string
          description: Notes about the document
      required:
      - approved_at
      - approved_by
      - doc_type
      - file
      - id
      - uploaded_at
    RegistrationDocumentUpload:
      type: object
      description: Serializer for uploading registration documents
      properties:
        doc_type:
          $ref: '#/components/schemas/DocTypeEnum'
        file:
          type: string
          format: uri
          pattern: (?:pdf|jpg|jpeg|png|doc|docx)$
        note:
          type: string
          description: Notes about the document
      required:
      - doc_type
      - file
    RegistrationList:
      type: object
      description: Serializer for registration list views
      properties:
        id:
          type: integer
          readOnly: true
        event_name:
          type: string
          readOnly: true
        event_sport:
          type: string
          readOnly: true
        event_start_date:
          type: string
          format: date-time
          readOnly: true
        division_name:
          type: string
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        team:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/Status1f0Enum'
        fee_dollars:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        submitted_at:
          type: string
          format: date-time
          readOnly: true
        user_name:
          type: string
          readOnly: true
      required:
      - division_name
      - event_name
      - event_sport
      - event_start_date
      - fee_dollars
      - id
      - submitted_at
      - user_name
    RequestedRoleEnum:
      enum:
      - ORGANIZER
      - COACH
      - ATHLETE
      type: string
      description: |-
        * `ORGANIZER` - Event Organizer
        * `COACH` - Coach
        * `ATHLETE` - Athlete
    Result:
      type: object
      description: Serializer for Result model
      properties:
        id:
          type: integer
          readOnly: true
        fixture_id:
          type: integer
          readOnly: true
        fixture_name:
          type: string
          readOnly: true
        home_team:
          type: string
          readOnly: true
        away_team:
          type: string
          readOnly: true
        event_name:
          type: string
          readOnly: true
        event_id:
          type: integer
          readOnly: true
        home_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Home team score
        away_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Away team score
        winner:
          type: integer
          nullable: true
          description: Winning team (null for draws)
        winner_name:
          type: string
          readOnly: true
        stats:
          description: Additional statistics (JSON)
        entered_by:
          type: integer
          nullable: true
          description: User who entered this result
        entered_by_name:
          type: string
          readOnly: true
        entered_by_email:
          type: string
          readOnly: true
        finalized_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: When result was finalized
        is_draw:
          type: boolean
          readOnly: true
        is_finalized:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - away_team
      - created_at
      - entered_by_email
      - entered_by_name
      - event_id
      - event_name
      - finalized_at
      - fixture_id
      - fixture_name
      - home_team
      - id
      - is_draw
      - is_finalized
      - updated_at
      - winner_name
    ResultCreate:
      type: object
      description: Serializer for creating results
      properties:
        home_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Home team score
        away_score:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Away team score
        stats:
          description: Additional statistics (JSON)
    RoleB11Enum:
      enum:
      - ADMIN
      - ORGANIZER
      - COACH
      - ATHLETE
      - SPECTATOR
      type: string
      description: |-
        * `ADMIN` - Administrator
        * `ORGANIZER` - Event Organizer
        * `COACH` - Coach
        * `ATHLETE` - Athlete
        * `SPECTATOR` - Spectator
    RoleRequest:
      type: object
      description: Serializer for role requests
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          format: email
          readOnly: true
        user_display_name:
          type: string
          readOnly: true
        requested_role:
          $ref: '#/components/schemas/RequestedRoleEnum'
        requested_role_display:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/RoleRequestStatusEnum'
        status_display:
          type: string
          readOnly: true
        note:
          type: string
          description: User's reason for requesting this role
        organization_name:
          type: string
          description: For Organizer role
          maxLength: 200
        organization_website:
          type: string
          format: uri
          description: For Organizer role
          maxLength: 200
        coaching_experience:
          type: string
          description: For Coach role
        sport_discipline:
          type: string
          description: For Athlete role
          maxLength: 100
        reviewed_by_email:
          type: string
          format: email
          readOnly: true
        reviewed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        review_notes:
          type: string
          readOnly: true
        rejection_reason:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - rejection_reason
      - requested_role
      - requested_role_display
      - review_notes
      - reviewed_at
      - reviewed_by_email
      - status_display
      - updated_at
      - user
      - user_display_name
      - user_email
    RoleRequestCreate:
      type: object
      description: Serializer for creating role requests
      properties:
        requested_role:
          $ref: '#/components/schemas/RequestedRoleEnum'
        note:
          type: string
          description: User's reason for requesting this role
        organization_name:
          type: string
          description: For Organizer role
          maxLength: 200
        organization_website:
          type: string
          format: uri
          description: For Organizer role
          maxLength: 200
        coaching_experience:
          type: string
          description: For Coach role
        sport_discipline:
          type: string
          description: For Athlete role
          maxLength: 100
      required:
      - requested_role
    RoleRequestReview:
      type: object
      description: Serializer for admin role request review
      properties:
        action:
          $ref: '#/components/schemas/RoleRequestReviewActionEnum'
        notes:
          type: string
        reason:
          type: string
      required:
      - action
    RoleRequestReviewActionEnum:
      enum:
      - approve
      - reject
      type: string
      description: |-
        * `approve` - approve
        * `reject` - reject
    RoleRequestStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
      description: |-
        * `pending` - Pending Review
        * `approved` - Approved
        * `rejected` - Rejected
    RoleTypeEnum:
      enum:
      - ADMIN
      - ORGANIZER
      - COACH
      - ATHLETE
      - SPECTATOR
      type: string
      description: |-
        * `ADMIN` - Administrator
        * `ORGANIZER` - Event Organizer
        * `COACH` - Coach
        * `ATHLETE` - Athlete
        * `SPECTATOR` - Spectator
    ScopeEnum:
      enum:
      - event
      - team
      - registration
      - direct
      type: string
      description: |-
        * `event` - Event
        * `team` - Team
        * `registration` - Registration
        * `direct` - Direct
    Sport:
      type: object
      description: Serializer for Sport model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Sport name
          maxLength: 100
        description:
          type: string
          description: Sport description
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
    Status1f0Enum:
      enum:
      - PENDING
      - APPROVED
      - REJECTED
      type: string
      description: |-
        * `PENDING` - Pending
        * `APPROVED` - Approved
        * `REJECTED` - Rejected
    Status34cEnum:
      enum:
      - SCHEDULED
      - LIVE
      - FINAL
      type: string
      description: |-
        * `SCHEDULED` - Scheduled
        * `LIVE` - Live
        * `FINAL` - Final
    StatusAcbEnum:
      enum:
      - UPCOMING
      - ONGOING
      - COMPLETED
      - CANCELLED
      type: string
      description: |-
        * `UPCOMING` - Upcoming
        * `ONGOING` - Ongoing
        * `COMPLETED` - Completed
        * `CANCELLED` - Cancelled
    Team:
      type: object
      description: Serializer for Team model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Team name
          maxLength: 100
        manager:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        manager_id:
          type: integer
          writeOnly: true
        coach:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        coach_id:
          type: integer
          writeOnly: true
          nullable: true
        event:
          type: integer
          description: Event this team participates in
        description:
          type: string
          description: Team description
        members:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
          readOnly: true
        member_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - coach
      - created_at
      - event
      - id
      - manager
      - manager_id
      - member_count
      - members
      - name
      - updated_at
    TeamMember:
      type: object
      description: Serializer for TeamMember model
      properties:
        id:
          type: integer
          readOnly: true
        athlete:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        athlete_id:
          type: integer
          writeOnly: true
        jersey_no:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Jersey number
        position:
          type: string
          description: Player position
          maxLength: 50
        is_captain:
          type: boolean
          description: Whether this member is the team captain
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - athlete
      - athlete_id
      - created_at
      - id
      - jersey_no
      - updated_at
    TopicEnum:
      enum:
      - registration
      - schedule
      - results
      - ticket
      - payment
      - system
      - message
      type: string
      description: |-
        * `registration` - Registration
        * `schedule` - Schedule
        * `results` - Results
        * `ticket` - Ticket
        * `payment` - Payment
        * `system` - System
        * `message` - Message
    TypeEnum:
      enum:
      - TEAM
      - ATHLETE
      type: string
      description: |-
        * `TEAM` - Team
        * `ATHLETE` - Athlete
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        role:
          $ref: '#/components/schemas/RoleB11Enum'
        is_active:
          type: boolean
        is_staff:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        email_verified:
          type: boolean
          readOnly: true
      required:
      - date_joined
      - email
      - email_verified
      - id
      - is_staff
    UserList:
      type: object
      description: Serializer for listing users (admin only)
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        full_name:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        is_active:
          type: boolean
        email_verified:
          type: boolean
        role:
          $ref: '#/components/schemas/RoleB11Enum'
        primary_role_display:
          type: string
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        roles_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - created_at
      - date_joined
      - email
      - full_name
      - id
      - last_login
      - primary_role_display
      - roles_count
    UserProfile:
      type: object
      description: Serializer for user profile data
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 150
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        full_name:
          type: string
          readOnly: true
        display_name:
          type: string
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        email_verified:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        phone_number:
          type: string
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        date_of_birth:
          type: string
          format: date
          nullable: true
        address:
          type: string
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        profile_picture:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
        website:
          type: string
          format: uri
          maxLength: 200
        role:
          $ref: '#/components/schemas/RoleB11Enum'
        primary_role_display:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_verified:
          type: string
          readOnly: true
      required:
      - created_at
      - date_joined
      - display_name
      - email
      - email_verified
      - full_name
      - id
      - is_active
      - is_verified
      - last_login
      - primary_role_display
      - updated_at
    UserProfileUpdate:
      type: object
      description: Serializer for updating user profile
      properties:
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        phone_number:
          type: string
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        date_of_birth:
          type: string
          format: date
          nullable: true
        address:
          type: string
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        profile_picture:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
        website:
          type: string
          format: uri
          maxLength: 200
    UserProfileWithKyc:
      type: object
      description: Extended user profile serializer with KYC status and pending role
        request
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        username:
          type: string
          readOnly: true
          nullable: true
        first_name:
          type: string
          maxLength: 80
        last_name:
          type: string
          maxLength: 80
        full_name:
          type: string
          readOnly: true
        display_name:
          type: string
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/RoleB11Enum'
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        email_verified:
          type: boolean
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        kyc_status:
          type: string
          readOnly: true
        pending_role_request:
          type: string
          readOnly: true
      required:
      - date_joined
      - display_name
      - email
      - email_verified
      - full_name
      - id
      - is_active
      - kyc_status
      - last_login
      - pending_role_request
      - role
      - username
    UserRole:
      type: object
      description: Serializer for user roles
      properties:
        id:
          type: integer
          readOnly: true
        role_type:
          $ref: '#/components/schemas/RoleTypeEnum'
        role_type_display:
          type: string
          readOnly: true
        is_primary:
          type: boolean
          description: Primary role for this user
        is_active:
          type: boolean
        can_manage_events:
          type: boolean
        can_manage_teams:
          type: boolean
        can_manage_users:
          type: boolean
        can_manage_fixtures:
          type: boolean
        can_manage_results:
          type: boolean
        can_manage_payments:
          type: boolean
        can_manage_content:
          type: boolean
        can_view_reports:
          type: boolean
        context_type:
          type: string
          description: Type of context (event, team, organization)
          maxLength: 50
        context_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: ID of the context object
        assigned_at:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - assigned_at
      - created_at
      - id
      - role_type
      - role_type_display
      - updated_at
    Venue:
      type: object
      description: Serializer for Venue CRUD operations
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Unique venue name
          maxLength: 200
        address:
          type: string
          description: Full venue address
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum capacity (0 for unlimited)
        facilities:
          nullable: true
          description: Available facilities (JSON)
        created_by:
          type: integer
          readOnly: true
          description: User who created this venue
        created_by_name:
          type: string
          readOnly: true
        slot_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - capacity
      - created_at
      - created_by
      - created_by_name
      - id
      - name
      - slot_count
      - updated_at
    VenueList:
      type: object
      description: Lightweight serializer for venue lists
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Unique venue name
          maxLength: 200
        address:
          type: string
          description: Full venue address
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum capacity (0 for unlimited)
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - capacity
      - created_at
      - created_by_name
      - id
      - name
    VenueSlot:
      type: object
      description: Serializer for VenueSlot operations
      properties:
        id:
          type: integer
          readOnly: true
        venue:
          type: integer
          description: Venue this slot belongs to
        venue_name:
          type: string
          readOnly: true
        starts_at:
          type: string
          format: date-time
          description: Slot start time
        ends_at:
          type: string
          format: date-time
          description: Slot end time
        status:
          allOf:
          - $ref: '#/components/schemas/VenueSlotStatusEnum'
          description: |-
            Slot availability status

            * `available` - Available
            * `blocked` - Blocked
        reason:
          type: string
          nullable: true
          description: Reason for blocking (if applicable)
        duration_minutes:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - duration_minutes
      - ends_at
      - id
      - starts_at
      - updated_at
      - venue
      - venue_name
    VenueSlotStatusEnum:
      enum:
      - available
      - blocked
      type: string
      description: |-
        * `available` - Available
        * `blocked` - Blocked
    VisibilityEnum:
      enum:
      - PUBLIC
      - PRIVATE
      type: string
      description: |-
        * `PUBLIC` - Public
        * `PRIVATE` - Private
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
