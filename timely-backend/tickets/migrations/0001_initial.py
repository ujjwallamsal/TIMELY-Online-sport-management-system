# Generated by Django 5.2.6 on 2025-09-17 06:05

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.PositiveIntegerField(help_text='Event ID')),
                ('intent_id', models.CharField(help_text='Stripe PaymentIntent ID', max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], db_index=True, default='pending', max_length=20)),
                ('amount', models.PositiveIntegerField(help_text='Amount in cents')),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique ticket code', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('valid', 'Valid'), ('used', 'Used'), ('void', 'Void')], db_index=True, default='valid', max_length=10)),
                ('qr_payload', models.TextField(help_text='QR code payload string')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='tickets.purchase')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.PositiveIntegerField(help_text='Event ID')),
                ('fixture_id', models.PositiveIntegerField(blank=True, help_text='Fixture ID', null=True)),
                ('total_cents', models.PositiveIntegerField(help_text='Total amount in cents', validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', help_text='Currency code', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('payment_provider', models.CharField(choices=[('stripe', 'Stripe'), ('paypal', 'PayPal'), ('offline', 'Offline Bank Transfer')], default='stripe', max_length=20)),
                ('provider_session_id', models.CharField(blank=True, help_text='Payment provider session ID', max_length=255, null=True)),
                ('provider_payment_intent_id', models.CharField(blank=True, help_text='Payment provider payment intent ID', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.PositiveIntegerField(help_text='Event ID')),
                ('fixture_id', models.PositiveIntegerField(blank=True, help_text='Fixture ID', null=True)),
                ('name', models.CharField(help_text='Ticket type name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Ticket description')),
                ('price_cents', models.PositiveIntegerField(help_text='Price in cents', validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', help_text='Currency code', max_length=3)),
                ('quantity_total', models.PositiveIntegerField(help_text='Total quantity available', validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_sold', models.PositiveIntegerField(default=0, help_text='Quantity sold', validators=[django.core.validators.MinValueValidator(0)])),
                ('on_sale', models.BooleanField(default=True, help_text='Whether tickets are on sale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['event_id', 'fixture_id', 'price_cents'],
                'indexes': [models.Index(fields=['event_id', 'fixture_id', 'on_sale'], name='tickets_tic_event_i_fe8b2f_idx'), models.Index(fields=['event_id', 'on_sale'], name='tickets_tic_event_i_3fdac7_idx'), models.Index(fields=['fixture_id', 'on_sale'], name='tickets_tic_fixture_20c9be_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='purchase',
            index=models.Index(fields=['user', 'status'], name='tickets_pur_user_id_be5760_idx'),
        ),
        migrations.AddIndex(
            model_name='purchase',
            index=models.Index(fields=['event_id', 'status'], name='tickets_pur_event_i_9c577b_idx'),
        ),
        migrations.AddIndex(
            model_name='purchase',
            index=models.Index(fields=['intent_id'], name='tickets_pur_intent__2874e3_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['purchase'], name='tickets_tic_purchas_1d7a2b_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['code'], name='tickets_tic_code_2520cc_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='tickets_tic_status_0e5646_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['user', 'status'], name='tickets_tic_user_id_4b5d07_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['event_id', 'status'], name='tickets_tic_event_i_974187_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['fixture_id', 'status'], name='tickets_tic_fixture_4fd8b2_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['provider_session_id'], name='tickets_tic_provide_e57396_idx'),
        ),
    ]
