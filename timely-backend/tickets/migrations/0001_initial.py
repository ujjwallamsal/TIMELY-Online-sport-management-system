# Generated by Django 5.2.5 on 2025-08-21 04:57

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0002_division_alter_event_options_event_capacity_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TicketOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(help_text='Unique order number', max_length=20, unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Payment'), ('PAID', 'Payment Confirmed'), ('CANCELLED', 'Order Cancelled'), ('REFUNDED', 'Order Refunded'), ('EXPIRED', 'Payment Expired')], db_index=True, default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(help_text='When the order expires if not paid')),
                ('payment_provider', models.CharField(blank=True, choices=[('STRIPE', 'Stripe'), ('PAYPAL', 'PayPal'), ('CASH', 'Cash Payment'), ('BANK_TRANSFER', 'Bank Transfer')], max_length=20, null=True)),
                ('provider_reference', models.CharField(blank=True, help_text="Payment provider's reference ID", max_length=255, null=True)),
                ('payment_amount_cents', models.PositiveIntegerField(help_text='Total amount paid in cents')),
                ('payment_currency', models.CharField(default='USD', max_length=3)),
                ('payment_date', models.DateTimeField(blank=True, help_text='When payment was confirmed', null=True)),
                ('customer_name', models.CharField(help_text='Full name of ticket holder', max_length=255)),
                ('customer_email', models.EmailField(help_text='Email for ticket delivery', max_length=254)),
                ('customer_phone', models.CharField(blank=True, help_text='Phone number for contact', max_length=20, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes for the order')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_orders', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_orders', to='events.event')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('STRIPE', 'Stripe'), ('PAYPAL', 'PayPal'), ('CASH', 'Cash Payment'), ('BANK_TRANSFER', 'Bank Transfer')], max_length=20)),
                ('provider_reference', models.CharField(help_text="Payment provider's reference ID", max_length=255)),
                ('amount_cents', models.PositiveIntegerField(help_text='Payment amount in cents')),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SUCCEEDED', 'Succeeded'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], db_index=True, default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When payment was processed', null=True)),
                ('provider_data', models.JSONField(default=dict, help_text='Raw response data from payment provider')),
                ('error_message', models.TextField(blank=True, help_text='Error message if payment failed')),
                ('error_code', models.CharField(blank=True, help_text='Error code from payment provider', max_length=100)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_records', to='tickets.ticketorder')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Ticket type name (e.g., 'VIP Pass', 'General Admission')", max_length=100)),
                ('category', models.CharField(choices=[('GENERAL', 'General Admission'), ('VIP', 'VIP Access'), ('PREMIUM', 'Premium Experience'), ('STUDENT', 'Student Discount'), ('SENIOR', 'Senior Citizen'), ('CHILD', 'Child Ticket'), ('FAMILY', 'Family Package'), ('GROUP', 'Group Discount')], default='GENERAL', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of what this ticket includes')),
                ('price_cents', models.PositiveIntegerField(help_text='Price in cents (e.g., 2500 = $25.00)')),
                ('currency', models.CharField(default='USD', help_text='Currency code', max_length=3)),
                ('total_quantity', models.PositiveIntegerField(help_text='Total tickets available')),
                ('sold_quantity', models.PositiveIntegerField(default=0, help_text='Number of tickets sold')),
                ('max_per_order', models.PositiveIntegerField(default=10, help_text='Maximum tickets per order')),
                ('sale_start', models.DateTimeField(help_text='When ticket sales begin')),
                ('sale_end', models.DateTimeField(help_text='When ticket sales end')),
                ('includes_seating', models.BooleanField(default=False, help_text='Does this ticket include assigned seating?')),
                ('includes_amenities', models.BooleanField(default=False, help_text='Does this ticket include special amenities?')),
                ('is_transferable', models.BooleanField(default=True, help_text='Can this ticket be transferred to another person?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this ticket type currently available?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_types', to='events.event')),
            ],
            options={
                'ordering': ['event', 'price_cents'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(help_text='Unique ticket identifier', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('USED', 'Used'), ('CANCELLED', 'Cancelled'), ('EXPIRED', 'Expired')], db_index=True, default='ACTIVE', max_length=20)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, help_text='When the ticket was used', null=True)),
                ('expires_at', models.DateTimeField(help_text='When the ticket expires')),
                ('holder_name', models.CharField(help_text='Name of the person who will use this ticket', max_length=255)),
                ('holder_email', models.EmailField(help_text='Email of the ticket holder', max_length=254)),
                ('seat_number', models.CharField(blank=True, help_text='Assigned seat number', max_length=20, null=True)),
                ('section', models.CharField(blank=True, help_text='Seating section', max_length=50, null=True)),
                ('qr_code', models.ImageField(blank=True, help_text='QR code for ticket validation', null=True, upload_to='ticket_qr_codes/')),
                ('validation_hash', models.CharField(help_text='Hash for ticket validation', max_length=64, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this ticket')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='tickets.ticketorder')),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='tickets.tickettype')),
            ],
            options={
                'ordering': ['order', 'issued_at'],
            },
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['customer', 'status'], name='tickets_tic_custome_013831_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['event', 'status'], name='tickets_tic_event_i_974187_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['order_number'], name='tickets_tic_order_n_d35cbb_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketorder',
            index=models.Index(fields=['payment_provider', 'provider_reference'], name='tickets_tic_payment_fb8b80_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrecord',
            index=models.Index(fields=['order', 'status'], name='tickets_pay_order_i_460310_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrecord',
            index=models.Index(fields=['provider', 'provider_reference'], name='tickets_pay_provide_40c676_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrecord',
            index=models.Index(fields=['status', 'created_at'], name='tickets_pay_status_15b1ee_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['event', 'is_active'], name='tickets_tic_event_i_4b23ce_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['sale_start', 'sale_end'], name='tickets_tic_sale_st_ed6bfc_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['category', 'is_active'], name='tickets_tic_categor_24be36_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_id'], name='tickets_tic_ticket__5a4a00_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['order', 'status'], name='tickets_tic_order_i_ccd08a_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_type', 'status'], name='tickets_tic_ticket__0ca21b_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['validation_hash'], name='tickets_tic_validat_619851_idx'),
        ),
    ]
